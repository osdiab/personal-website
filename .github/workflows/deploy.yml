name: Deploy
on:
  push:
    branches:
      - stg
      - prd
  pull_request_target:
    types: [opened, closed, reopened, synchronize]
    branches:
      - stg

concurrency:
  group: ${{ github.workflow }}-${{github.event_name}}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  get-tool-versions:
    name: Get Tool Versions
    runs-on: ubuntu-latest
    outputs:
      pnpm: ${{ steps.versions.outputs.pnpm }}
      nodejs: ${{ steps.versions.outputs.nodejs }}
    steps:
      - uses: actions/checkout@v3
      - name: Read .tool-versions
        uses: marocchino/tool-versions-action@v1
        id: versions

  check-web-types:
    name: Check Web Types
    runs-on: ubuntu-latest
    needs: [get-tool-versions]
    steps:
      - uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.get-tool-versions.outputs.pnpm }}
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.get-tool-versions.outputs.nodejs }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --filter "@osdiab-website/web..."
      - name: Check Web App Types
        run: pnpm run --filter @osdiab-website/app typecheck

  check-lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [get-tool-versions]
    steps:
      - uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.get-tool-versions.outputs.pnpm }}
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.get-tool-versions.outputs.nodejs }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --filter "@osdiab-website/monorepo..."
      - name: Run Lint
        run: pnpm lint

  check-format:
    name: Check format
    runs-on: ubuntu-latest
    needs: [get-tool-versions]
    steps:
      - uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.get-tool-versions.outputs.pnpm }}
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.get-tool-versions.outputs.nodejs }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --filter "@osdiab-website/monorepo"
      - name: Run Format
        run: pnpm format:check

  delete-existing-neon-branch:
    name: "Delete old Neon postgres branch"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target'
    steps:
      - name: List Neon branches
        id: list-branches
        env:
          NEON_PROJECT_ID: ${{secrets.NEON_PROJECT_ID_APP_DB_STG}}
          NEON_API_KEY: ${{secrets.NEON_API_KEY}}
        run: |
          curl "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches" \
            --header 'accept: application/json' \
            --header "Authorization: Bearer $NEON_API_KEY" \
            --fail-with-body \
            --output list-neon-branches-response.json
      - name: Upload list branches failure
        if: failure() && steps.list-branches.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: list-neon-branches-failure.json
          path: list-neon-branches-response.json
      - name: Get existing Neon branch for this PR
        id: get-existing-branch
        run: |
          echo "branch_id=$(
            jq --raw-output '.branches[] | select(.name | startswith("PR #${{ github.event.number }} ")).id' list-neon-branches-response.json
          )" >> $GITHUB_OUTPUT
      - name: Delete existing branch for this PR
        id: delete-existing-branch
        if: ${{ steps.get-existing-branch.outputs.branch_id != '' }}
        env:
          NEON_PROJECT_ID: ${{secrets.NEON_PROJECT_ID_APP_DB_STG}}
          NEON_API_KEY: ${{secrets.NEON_API_KEY}}
        # due to Neon operations concurrency limit, need to retry for now
        # https://community.neon.tech/t/project-already-has-running-operations-scheduling-of-new-ones-is-prohibited/242
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 1
          max_attempts: 3
          retry_on: error
          command: |
            curl "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches/${{ steps.get-existing-branch.outputs.branch_id }}" \
              --request DELETE \
              --header 'Accept: application/json' \
              --header "Authorization: Bearer $NEON_API_KEY" \
              --header 'Content-Type: application/json' \
              --fail-with-body \
              --output delete-neon-branch-response.json
      - name: Upload existing branch deletion failure
        if: failure() && steps.delete-existing-branch.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: delete-neon-branch-failure.json
          path: delete-neon-branch-response.json

  preview-neon:
    if: github.event_name == 'pull_request_target' && github.event.action != 'closed'
    name: "Make Neon preview postgres branch"
    runs-on: ubuntu-latest
    outputs:
      preview_branch_id: ${{ steps.parse-preview-branch-id.outputs.branch_id}}
    steps:
      - name: List Neon branches
        id: list-branches
        env:
          NEON_PROJECT_ID: ${{secrets.NEON_PROJECT_ID_APP_DB_STG}}
          NEON_API_KEY: ${{secrets.NEON_API_KEY}}
        run: |
          curl "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches" \
            --header 'accept: application/json' \
            --header "Authorization: Bearer $NEON_API_KEY" \
            --fail-with-body \
            --output list-neon-branches-response.json
      - name: Upload list branches failure
        if: failure() && steps.list-branches.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: list-neon-branches-failure.json
          path: list-neon-branches-response.json
      - name: Get main Neon branch
        id: get-main-branch
        run: |
          echo "branch_id=$(
            jq --raw-output '.branches[] | select(.name=="main").id' list-neon-branches-response.json
          )" >> $GITHUB_OUTPUT
      - name: Create Neon branch
        id: create-branch
        env:
          NEON_PROJECT_ID: ${{secrets.NEON_PROJECT_ID_APP_DB_STG}}
          NEON_API_KEY: ${{secrets.NEON_API_KEY}}
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 1
          max_attempts: 3
          retry_on: error
          command: |
            curl "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches" \
              --header 'Accept: application/json' \
              --header "Authorization: Bearer $NEON_API_KEY" \
              --header 'Content-Type: application/json' \
              --fail-with-body \
              --output create-neon-branch-response.json \
              --data "{
                \"endpoints\": [{ \"type\": \"read_write\" }],
                \"branch\": {
                  \"parent_id\": \"${{steps.get-main-branch.outputs.branch_id}}\",
                  \"name\": \"PR #${{ github.event.number }} (${{ github.head_ref }} SHA: ${{ github.sha }})\"
                }
              }"
      - name: Upload create branch failure
        if: failure() && steps.create-branch.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: create-neon-branch-failure.json
          path: create-neon-branch-response.json
      - name: Output preview Neon branch endpoint
        id: parse-preview-branch-id
        run: |
          echo "branch_id=$(
            jq --raw-output '.endpoints[0].host' create-neon-branch-response.json
          )" >> $GITHUB_OUTPUT

  preview-hasura:
    name: Create Hasura preview
    runs-on: ubuntu-latest
    needs: [preview-neon]
    if: github.event_name == 'pull_request_target' && github.event.action != 'closed'
    steps:
      - uses: actions/checkout@v2
      - uses: osdiab/hasura-cloud-preview-apps@main
        with:
          name: "personal-website-pr-${{github.event.number}}"
          hasuraProjectDirectoryPath: apps/gql-engine
          hasuraEnv: |
            HASURA_GRAPHQL_DATABASE_URL=postgres://${{secrets.APP_DB_USER_STG}}:${{secrets.APP_DB_PASSWORD_STG}}@${{needs.preview-neon.outputs.preview_branch_id}}/${{secrets.APP_DB_DATABASE_STG}}
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          HASURA_CLOUD_ACCESS_TOKEN: ${{secrets.HASURA_CLOUD_ACCESS_TOKEN}}

  delete-hasura-preview-app:
    name: Delete Hasura preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target' && github.event.action == 'closed'
    steps:
      - uses: actions/checkout@v2
      - uses: osdiab/hasura-cloud-preview-apps@main
        with:
          name: "personal-website-pr-${{github.event.number}}"
          delete: true
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          HASURA_CLOUD_ACCESS_TOKEN: ${{secrets.HASURA_CLOUD_ACCESS_TOKEN}}

  build-web-app:
    name: Build Web App
    runs-on: ubuntu-latest
    needs: [get-tool-versions]
    steps:
      - uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.get-tool-versions.outputs.pnpm }}
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.get-tool-versions.outputs.nodejs }}
          cache: "pnpm"
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v2
      - name: Install dependencies
        run: pnpm install --filter "@osdiab-website/web..."
      - name: Install Vercel CLI
        run: pnpm install --global vercel
      - name: Pull Vercel config
        run: vercel pull --yes --token=${VERCEL_TOKEN}
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB_APP }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      - name: Preview Build
        run: vercel build
        if: (github.event_name == 'pull_request_target' && github.event.action != 'closed') || github.ref != 'refs/heads/prd'
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB_APP }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_WEB_APP_STG }}
      - name: Production Build
        run: vercel build --prod
        if: github.event_name == 'push' && github.ref == 'refs/heads/prd'
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB_APP }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_WEB_APP_PRD }}
      - name: Tar build artifact for deployment
        run: tar -cf vercel-build.tar ./.vercel
      - uses: actions/upload-artifact@v3
        with:
          name: build-web-app-${{ github.sha }}
          path: vercel-build.tar

  deploy-to-vercel:
    permissions:
      pull-requests: write
      contents: write
    name: Deploy to Vercel
    if: github.event_name != 'pull_request_target' || github.event.action != 'closed'
    runs-on: ubuntu-latest
    needs:
      [
        get-tool-versions,
        check-web-types,
        check-lint,
        check-format,
        build-web-app,
      ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: build-web-app-${{ github.sha }}
      - name: Extract tar build artifact for deployment
        run: tar -xf vercel-build.tar
      - name: Deploy Vercel Preview
        uses: amondnet/vercel-action@v20
        if: (github.event_name == 'pull_request_target' && github.event.action != 'closed') || github.ref != 'refs/heads/prd'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_WEB_APP }}
          vercel-args: --prebuilt
      - name: Deploy Vercel Production
        uses: amondnet/vercel-action@v25
        if: github.event_name == 'push' && github.ref == 'refs/heads/prd'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_WEB_APP }}
          vercel-args: --prebuilt --prod
