name: Deploy
on:
  push:
    branches:
      - stg
      - prd
  pull_request_target:
    types: [opened, reopened, synchronize]
    branches:
      - stg

concurrency:
  group: ${{ github.workflow }}-${{github.event_name}}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  get-tool-versions:
    name: Get Tool Versions
    runs-on: ubuntu-latest
    outputs:
      pnpm: ${{ steps.versions.outputs.pnpm }}
      nodejs: ${{ steps.versions.outputs.nodejs }}
    steps:
      - uses: actions/checkout@v3
      - name: Read .tool-versions
        uses: marocchino/tool-versions-action@v1
        id: versions

  check-web-types:
    name: Check Web Types
    runs-on: ubuntu-latest
    needs: [get-tool-versions]
    steps:
      - uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.get-tool-versions.outputs.pnpm }}
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.get-tool-versions.outputs.nodejs }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --filter "@osdiab-website/web..."
      - name: Check Web App Types
        run: pnpm run --filter @osdiab-website/app typecheck

  check-lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [get-tool-versions]
    steps:
      - uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.get-tool-versions.outputs.pnpm }}
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.get-tool-versions.outputs.nodejs }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --filter "@osdiab-website/monorepo..."
      - name: Run Lint
        run: pnpm lint

  check-format:
    name: Check format
    runs-on: ubuntu-latest
    needs: [get-tool-versions]
    steps:
      - uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.get-tool-versions.outputs.pnpm }}
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.get-tool-versions.outputs.nodejs }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --filter "@osdiab-website/monorepo"
      - name: Run Format
        run: pnpm format:check

  delete-existing-neon-branch:
    name: "Delete old Neon postgres branch"
    uses: "./.github/workflows/delete-neon-pr-branch.yml"
    with:
      pr-number: ${{github.event.number}}
    secrets:
      neon-project-id: ${{secrets.NEON_PROJECT_ID_APP_DB_STG}}
      neon-api-key: ${{secrets.NEON_API_KEY}}

  preview-neon:
    if: github.event_name == 'pull_request_target'
    name: "Make Neon preview postgres branch"
    runs-on: ubuntu-latest
    outputs:
      preview_branch_id: ${{ steps.parse-preview-branch-id.outputs.branch_id}}
    steps:
      - name: List Neon branches
        id: list-branches
        env:
          NEON_PROJECT_ID: ${{secrets.NEON_PROJECT_ID_APP_DB_STG}}
          NEON_API_KEY: ${{secrets.NEON_API_KEY}}
        run: |
          curl "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches" \
            --header 'accept: application/json' \
            --header "Authorization: Bearer $NEON_API_KEY" \
            --fail-with-body \
            --output list-neon-branches-response.json
      - name: Upload list branches failure
        if: failure() && steps.list-branches.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: list-neon-branches-failure.json
          path: list-neon-branches-response.json
      - name: Get main Neon branch
        id: get-main-branch
        run: |
          echo "branch_id=$(
            jq --raw-output '.branches[] | select(.name=="main").id' list-neon-branches-response.json
          )" >> "$GITHUB_OUTPUT"
      - name: Create Neon branch
        id: create-branch
        env:
          NEON_PROJECT_ID: ${{secrets.NEON_PROJECT_ID_APP_DB_STG}}
          NEON_API_KEY: ${{secrets.NEON_API_KEY}}
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 1
          max_attempts: 3
          retry_on: error
          command: |
            curl "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches" \
              --header 'Accept: application/json' \
              --header "Authorization: Bearer $NEON_API_KEY" \
              --header 'Content-Type: application/json' \
              --fail-with-body \
              --output create-neon-branch-response.json \
              --data "{
                \"endpoints\": [{ \"type\": \"read_write\" }],
                \"branch\": {
                  \"parent_id\": \"${{steps.get-main-branch.outputs.branch_id}}\",
                  \"name\": \"PR #${{ github.event.number }} (${{ github.head_ref }} SHA: ${{ github.sha }})\"
                }
              }"
      - name: Upload create branch failure
        if: failure() && steps.create-branch.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: create-neon-branch-failure.json
          path: create-neon-branch-response.json
      - name: Output preview Neon branch endpoint
        id: parse-preview-branch-id
        run: |
          echo "branch_id=$(
            jq --raw-output '.endpoints[0].host' create-neon-branch-response.json
          )" >> "$GITHUB_OUTPUT"

  create-hasura-preview-tenant:
    runs-on: ubuntu-latest
    name: Create tenant
    outputs:
      tenant_id: ${{ steps.createTenant.outputs.tenant_id }}
    steps:
      - name: Create Tenant
        id: createTenant
        run: |
          QUERY=$(cat <<-GQL
            mutation CreateTenant {
              createTenant(cloud: "aws", region: "eu-central-1", plan: "cloud_free_v2") {
                id
              }
            }
          GQL
          )
          RESPONSE=$(curl --silent --show-error --fail-with-body -X POST 'https://data.pro.hasura.io/v1/graphql' \
            -H 'Content-Type: application/json' \
            -H 'Authorization: pat ${{ secrets.HASURA_CLOUD_ACCESS_TOKEN }}' \
            -d @- <<EOF
            {
              "query": "$(echo $QUERY | tr -d '\n')"
            }
            EOF
          )
          TENANT_ID=$(echo "${RESPONSE}" | jq -r '.data.createTenant.id')
          echo "tenant_id=$TENANT_ID" >> $GITHUB_OUTPUT
      - name: Upload createTenant response
        id: uploadCreateTenantResponse
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: createTenantResponse
          path: createTenantResponse.json

  configure-hasura-preview-tenant:
    runs-on: ubuntu-latest
    name: Configure tenant
    needs: [create-hasura-preview-tenant, preview-neon]
    outputs:
      endpoint: ${{ steps.updateTenantEnvAndName.outputs.endpoint }}
      admin_secret: ${{ steps.getTenantEnv.outputs.gql_admin_secret }}
    steps:
      - name: Get Tenant Env
        id: getTenantEnv
        run: |
          QUERY=$(cat <<-GQL
            query GetTenantEnv(\$tenantId: uuid!) {
              getTenantEnv(tenantId: \$tenantId) {
                envVars
                hash
              }
            }
          GQL
          )
          RESPONSE=$(curl --silent --show-error --fail-with-body -X POST 'https://data.pro.hasura.io/v1/graphql' \
            -H 'Content-Type: application/json' \
            -H 'Authorization: pat ${{ secrets.HASURA_CLOUD_ACCESS_TOKEN }}' \
            -d @- <<EOF
            {
              "query": "$(echo $QUERY | tr -d '\n')",
              "variables": {
                "tenantId": "${{ needs.create-hasura-preview-tenant.outputs.tenant_id }}"
              }
            }
            EOF
          )
          ENV_HASH=$(echo "${RESPONSE}" | jq -r '.data.getTenantEnv.hash')
          GQL_ADMIN_SECRET=$(echo "${RESPONSE}" | jq -r '.data.getTenantEnv.envVars.HASURA_GRAPHQL_ADMIN_SECRET')
          echo "env_hash=$ENV_HASH" >> $GITHUB_OUTPUT
          echo "gql_admin_secret=$GQL_ADMIN_SECRET" >> $GITHUB_OUTPUT
      - name: Upload getTenantEnv response
        id: uploadGetTenantEnvResponse
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: getTenantEnvResponse
          path: getTenantEnvResponse.json
      - name: Update Tenant Env And Name
        id: updateTenantEnvAndName
        run: |
          tenantName="personal-website-pr-${{ github.event.number }}"
          dbUrl="postgres://${{ secrets.APP_DB_USER_STG }}:${{ secrets.APP_DB_PASSWORD_STG }}@${{ needs.preview-neon.outputs.preview_branch_id }}/${{ secrets.APP_DB_DATABASE_STG }}"
          QUERY=$(cat <<-GQL
            mutation UpdateTenantEnvAndName(\$tenantId: uuid!, \$tenantName: String!, \$dbUrl: String!, \$currentHash: String!) {
              updateTenantEnv(
                currentHash: \$currentHash
                envs: [{key: "MAIN_POSTGRES_DB_URL", value: \$dbUrl}]
                tenantId: \$tenantId
              ) {
                hash
              }
              updateTenantName(name: \$tenantName, tenantId: \$tenantId) {
                tenant_id
                tenant {
                  project {
                    endpoint
                  }
                }
              }
            }
          GQL
          )
          RESPONSE=$(curl --silent --show-error --fail-with-body -X POST 'https://data.pro.hasura.io/v1/graphql' \
            -H 'Content-Type: application/json' \
            -H 'Authorization: pat ${{ secrets.HASURA_CLOUD_ACCESS_TOKEN }}' \
            -d @- <<EOF
            {
              "query": "$(echo $QUERY | tr -d '\n')",
              "variables": {
                "tenantId": "${{ needs.create-hasura-preview-tenant.outputs.tenant_id }}",
                "tenantName": "${tenantName}",
                "dbUrl": "${dbUrl}",
                "currentHash": "${{ steps.getTenantEnv.outputs.env_hash }}"
              }
            }
            EOF
          )
          ENDPOINT=$(echo "${RESPONSE}" | jq -r '.data.updateTenantName.tenant.project.endpoint')
          echo "endpoint=$ENDPOINT" >> $GITHUB_OUTPUT
      - name: Upload updateTenantEnvAndName response
        id: uploadUpdateTenantEnvAndNameResponse
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: updateTenantEnvAndNameResponse
          path: updateTenantEnvAndNameResponse.json

  build-web-app:
    name: Build Web App
    runs-on: ubuntu-latest
    needs: [get-tool-versions]
    steps:
      - uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.get-tool-versions.outputs.pnpm }}
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.get-tool-versions.outputs.nodejs }}
          cache: "pnpm"
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v2
      - name: Install dependencies
        run: pnpm install --filter "@osdiab-website/web..."
      - name: Install Vercel CLI
        run: pnpm install --global vercel
      - name: Pull Vercel config
        run: vercel pull --yes --token=${VERCEL_TOKEN}
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB_APP }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      - name: Preview Build
        run: vercel build
        if: github.event_name == 'pull_request_target' || github.ref != 'refs/heads/prd'
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB_APP }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_WEB_APP_STG }}
      - name: Production Build
        run: vercel build --prod
        if: github.event_name == 'push' && github.ref == 'refs/heads/prd'
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB_APP }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_WEB_APP_PRD }}
      - name: Tar build artifact for deployment
        run: tar -cf vercel-build.tar ./.vercel
      - uses: actions/upload-artifact@v3
        with:
          name: build-web-app-${{ github.sha }}
          path: vercel-build.tar

  deploy-to-vercel-preview:
    permissions:
      pull-requests: write
      contents: write
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/prd'
    needs:
      [
        get-tool-versions,
        check-web-types,
        check-lint,
        check-format,
        build-web-app,
        configure-hasura-preview-tenant,
      ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: build-web-app-${{ github.sha }}
      - name: Extract tar build artifact for deployment
        run: tar -xf vercel-build.tar
      - name: Deploy Vercel Preview
        uses: amondnet/vercel-action@v20
        if: github.event_name == 'pull_request_target' || github.ref != 'refs/heads/prd'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_WEB_APP }}
          vercel-args: --prebuilt --env HASURA_GRAPHQL_ENDPOINT=${{needs.configure-hasura-preview-tenant.outputs.endpoint}} HASURA_GRAPHQL_ADMIN_SECRET=${{needs.configure-hasura-preview-tenant.outputs.admin_secret}}

  deploy-to-vercel-prod:
    permissions:
      pull-requests: write
      contents: write
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/prd'
    needs:
      [
        get-tool-versions,
        check-web-types,
        check-lint,
        check-format,
        build-web-app,
      ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: build-web-app-${{ github.sha }}
      - name: Extract tar build artifact for deployment
        run: tar -xf vercel-build.tar
      - name: Deploy Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_WEB_APP }}
          vercel-args: --prebuilt --prod
