name: Create Hasura Preview Tenant
on:
  workflow_call:
    inputs:
      tenant-name:
        type: string
        description: Proposed name for the tenant. Must only contain alphanumeric characters, hyphens and underscores
        required: true
      git-ref-name:
        type: string
        description: Git ref name associated with this tenant; label will created and attached to the tenant as 'preview-<git-ref-name>'
        required: true
    secrets:
      hasura-cloud-access-token:
        description: Hasura Cloud Access Token
        required: true
      db-url:
        description: Database URL to connect to
        required: true
      gpg-crypto-secret:
        description: GPG secret used to encrypt/decrypt admin secret
        required: true
    outputs:
      tenant_id:
        description: "Created Hasura Tenant ID"
        value: ${{jobs.create-hasura-preview-tenant.outputs.tenant-id}}
      hasura-endpoint:
        description: "Endpoint of the Hasura tenant"
        value: ${{ jobs.create-hasura-preview-tenant.outputs.endpoint }}
      admin-secret-encrypted:
        description: "Admin secret of the Hasura tenant, encrypted"
        value: ${{jobs.create-hasura-preview-tenant.outputs.admin-secret-encrypted}}

jobs:
  create-hasura-preview-tenant:
    runs-on: ubuntu-latest
    name: Get or Create Hasura Preview Tenant
    outputs:
      tenant-id: ${{ steps.create-tenant.outputs.tenant_id }}
      admin-secret-encrypted: ${{steps.get-admin-secret.outputs.admin_secret_encrypted}}}
      endpoint: ${{steps.create-tenant.outputs.endpoint}}
    steps:
      - name: Create Tenant
        id: create-tenant
        run: |
          GQL_QUERY=$(cat <<-GQL
            mutation CreateTenant {
              createTenant(
                cloud: "aws",
                region: "eu-central-1",
                plan: "cloud_free_v2",
                name: "${{inputs.tenant-name}}"
                envs: [{key: "MAIN_POSTGRES_DB_URL", value: "${{secrets.db-url}}"}]
              ) {
                id
                tenant {
                  project {
                    id
                    endpoint
                  }
                }
              }
            }
          GQL
          )

          REQUEST_PAYLOAD=$(jq -n --arg gqlQuery "$GQL_QUERY" '{ "query": $gqlQuery }')

          # Send the request using curl
          RESPONSE=$(curl \
            --fail-with-body \
            --silent \
            --show-error \
            --location \
            --request POST \
            --header 'Content-Type: application/json' \
            --header 'Authorization: pat ${{ secrets.hasura-cloud-access-token }}' \
            --data "$REQUEST_PAYLOAD" \
            'https://data.pro.hasura.io/v1/graphql'
          )

          echo "Payload: $REQUEST_PAYLOAD"
          echo "Response: $RESPONSE"

          # Check if the response contains errors
          if [[ $(echo "$RESPONSE" | jq -e '.errors') != "null" ]]; then
            echo "Error occurred: $RESPONSE"
            exit 1
          fi

          tenant_id=$(echo "$RESPONSE" | jq -r '.data.createTenant.id')
          echo "Tenant ID: $tenant_id"
          echo "tenant_id=$tenant_id" >> "$GITHUB_OUTPUT"

          project_id=$(echo "$RESPONSE" | jq -r '.data.createTenant.tenant.project.id')
          echo "Project ID: $project_id"
          echo "project_id=$project_id" >> "$GITHUB_OUTPUT"

          endpoint=$(echo "$RESPONSE" | jq -r '.data.createTenant.tenant.project.endpoint')
          echo "Endpoint: $endpoint"
          echo "endpoint=$endpoint" >> "$GITHUB_OUTPUT"

      # we set the name above, but it doesn't work on Hasura's end, frustratingly
      - name: Assign preview label and update Tenant name
        id: update-tenant-name
        run: |
          GQL_QUERY=$(cat <<-GQL
            mutation AssignLabelAndUpdateTenantName {
              insert_project_labels_one(
                object: {label: {data: {color: "#ffff00", name: "preview-${{inputs.git-ref-name}}"}},
                project_id: "${{steps.create-tenant.outputs.project_id}}"}
              ) {
                label_id
              }
              updateTenantName(
                tenantId: "${{steps.create-tenant.outputs.tenant_id}}"
                name: "${{inputs.tenant-name}}"
              ) {
                tenant_id
              }
            }
          GQL
          )

          REQUEST_PAYLOAD=$(jq -n --arg gqlQuery "$GQL_QUERY" '{ "query": $gqlQuery }')

          # Send the request using curl
          RESPONSE=$(curl \
            --fail-with-body \
            --silent \
            --show-error \
            --location \
            --request POST \
            --header 'Content-Type: application/json' \
            --header 'Authorization: pat ${{ secrets.hasura-cloud-access-token }}' \
            --data "$REQUEST_PAYLOAD" \
            'https://data.pro.hasura.io/v1/graphql'
          )

          echo "Payload: $REQUEST_PAYLOAD"
          echo "Response: $RESPONSE"

          # Check if the response contains errors
          if [[ $(echo "$RESPONSE" | jq -e '.errors') != "null" ]]; then
            echo "Error occurred: $RESPONSE"
            exit 1
          fi

      - name: Get Tenant Admin Secret
        id: get-admin-secret
        env:
          GPG_SECRET: ${{secrets.gpg-crypto-secret}}
        run: |
          GQL_QUERY=$(cat <<-GQL
            query GetTenantEnv(\$tenantId: uuid!) {
              getTenantEnv(tenantId: \$tenantId) {
                envVars
              }
            }
          GQL
          )

          REQUEST_PAYLOAD=$(jq -n \
            --arg gqlQuery "$GQL_QUERY" \
            --arg tenantId "${{ steps.create-tenant.outputs.tenant_id }}" \
            '{ "query": $gqlQuery, "variables": { "tenantId": $tenantId } }'
          )

          RESPONSE=$(curl --silent --show-error --fail-with-body -X POST 'https://data.pro.hasura.io/v1/graphql' \
            -H 'Content-Type: application/json' \
            -H 'Authorization: pat ${{ secrets.hasura-cloud-access-token }}' \
            -d "$REQUEST_PAYLOAD"
          )

          echo "Payload: $REQUEST_PAYLOAD"
          echo "Response: $RESPONSE"

          # Check if the response contains errors
          if [[ $(echo "$RESPONSE" | jq -e '.errors') != "null" ]]; then
            echo "Error occurred: $RESPONSE"
            exit 1
          fi

          GQL_ADMIN_SECRET=$(echo "${RESPONSE}" | jq -r '.data.getTenantEnv.envVars.HASURA_GRAPHQL_ADMIN_SECRET')
          # https://nitratine.net/blog/post/how-to-pass-secrets-between-runners-in-github-actions/
          echo "::add-mask::$GQL_ADMIN_SECRET"
          ADMIN_SECRET_ENCRYPTED=$(gpg --symmetric --batch --passphrase "$GPG_SECRET" --output - <(echo "$GQL_ADMIN_SECRET") | base64 -w0)
          echo "admin_secret_encrypted=$ADMIN_SECRET_ENCRYPTED" >> "$GITHUB_OUTPUT"
