name: Deploy Database and Hasura Changes
on:
  workflow_call:
    inputs:
      node-version:
        type: string
        required: true
      pnpm-version:
        type: string
        required: true
    secrets:
      db-url:
        description: "Database URL to connect to"
        required: true
      hasura-endpoint:
        description: "Endpoint of the Hasura tenant"
        required: true
      hasura-admin-secret:
        description: Admin secret of the Hasura tenant; either provide this or the encrypted secret
        required: false
      hasura-admin-secret-encrypted:
        description: Admin secret of the Hasura tenant, encrypted
        required: false
      gpg-crypto-secret:
        description: GPG key to decrypt the encrypted admin secret
        required: false

jobs:
  migrate-db:
    runs-on: ubuntu-latest
    name: Migrate Database
    steps:
      - name: Checkout branch to deploy
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ inputs.pnpm-version }}

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install migration package dependencies
        run: pnpm install --filter "db-migrations..."

      - name: Apply Migrations
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_on: error
          command: pnpm run --filter db-migrations migrate:noDoppler up
        # consider using doppler if there ends up needing to be more than this
        env:
          DATABASE_URL: ${{secrets.db-url}}
          PGSSLMODE: require

  apply-hasura-metadata:
    runs-on: ubuntu-latest
    name: Apply Hasura Metadata
    needs: ["migrate-db"]
    steps:
      - name: Checkout branch to deploy
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Check if encrypted admin secret is provided
        id: check-secret-encrypted
        run: echo "ADMIN_SECRET_ENCRYPTED_PRESENT=$(if echo '${{secrets.hasura-admin-secret-encrypted}}' | grep -q .; then echo 'yes'; else echo 'no'; fi)" >> "$GITHUB_OUTPUT"

      - id: decrypt-admin-secret
        name: Decrypt Hasura GraphQL Admin Secret
        if: ${{steps.check-secret-encrypted.outputs.ADMIN_SECRET_ENCRYPTED_PRESENT == 'yes'}}
        env:
          GPG_SECRET: ${{ secrets.gpg-crypto-secret }}
        run: |
          ADMIN_SECRET=$(gpg --decrypt --quiet --batch --passphrase "$GPG_SECRET" --output - <(echo "${{secrets.hasura-admin-secret-encrypted}}" | base64 --decode))
          echo "::add-mask::$ADMIN_SECRET"
          echo "admin_secret=$ADMIN_SECRET" >> "$GITHUB_OUTPUT"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ inputs.pnpm-version }}

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install Hasura CLI
        run: curl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | bash

      - name: Apply Hasura Metadata
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 5
          retry_on: error
          command: pnpm run --filter gql-engine hasura:noDoppler metadata apply --disallow-inconsistent-metadata
        env:
          HASURA_GRAPHQL_ENDPOINT: ${{ secrets.hasura-endpoint }}
          HASURA_GRAPHQL_ADMIN_SECRET: ${{ secrets.hasura-admin-secret || steps.decrypt-admin-secret.outputs.admin_secret }}

  # TODO: add a step to roll back migrations in case metadata application failed
