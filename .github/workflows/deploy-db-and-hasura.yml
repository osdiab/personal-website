name: Deploy Database and Hasura Changes
on:
  workflow_call:
    inputs:
      hasura-endpoint:
        type: string
        description: "Endpoint of the Hasura tenant"
        required: true
    secrets:
      hasura-admin-secret-encrypted:
        description: "Admin secret of the Hasura tenant"
        required: true
      db-url:
        description: "Database URL to connect to"
        required: true
      gpg-crypto-secret:
        description: GPG secret used to encrypt/decrypt admin secret
        required: true

jobs:
  get-tool-versions:
    name: Get Tool Versions
    runs-on: ubuntu-latest
    outputs:
      pnpm: ${{ steps.versions.outputs.pnpm }}
      nodejs: ${{ steps.versions.outputs.nodejs }}
    steps:
      - uses: actions/checkout@v3
      - name: Read .tool-versions
        uses: marocchino/tool-versions-action@v1
        id: versions

  deploy-hasura-preview:
    needs: [get-tool-versions]
    runs-on: ubuntu-latest
    name: Deploy Hasura Preview App
    steps:
      - name: Checkout stg branch
        uses: actions/checkout@v2
        with:
          ref: stg

      - name: Install Hasura CLI
        run: curl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | bash

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.get-tool-versions.outputs.pnpm }}

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.get-tool-versions.outputs.nodejs }}

      - name: Wait for Hasura to be ready
        env:
          GQL_ENDPOINT: ${{ inputs.hasura-endpoint}}
        run: |
          npx wait-on "${GQL_ENDPOINT/https:/https-get:}/healthz"
          npx wait-on "${GQL_ENDPOINT/https:/https-get:}/v1/version"

      - id: decrypt-admin-secret
        name: Decrypt Hasura GraphQL Admin Secret
        env:
          GPG_SECRET: ${{ secrets.gpg-crypto-secret }}
        run: |
          ADMIN_SECRET=$(gpg --decrypt --quiet --batch --passphrase "$GPG_SECRET" --output - <(echo "${{secrets.hasura-admin-secret-encrypted}}" | base64 --decode))
          echo "::add-mask::$ADMIN_SECRET"
          echo "admin_secret=$ADMIN_SECRET" >> "$GITHUB_OUTPUT"

      - name: Apply Hasura Staging Metadata
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 5
          retry_on: error
          command: pnpm run --filter gql-engine hasura:noDoppler metadata apply --disallow-inconsistent-metadata
        env:
          HASURA_GRAPHQL_ENDPOINT: ${{inputs.hasura-endpoint}}
          HASURA_GRAPHQL_ADMIN_SECRET: ${{ steps.decrypt-admin-secret.outputs.admin_secret }}

      - name: Checkout PR branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Install dependencies
        run: pnpm install --filter "db-migrations..."

      - name: Apply Migrations
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_on: error
          command: pnpm run --filter db-migrations migrate:noDoppler up
        # consider using doppler if there ends up needing to be more than this
        env:
          DATABASE_URL: ${{secrets.db-url}}
          PGSSLMODE: require

      - name: Apply Hasura Metadata
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 5
          retry_on: error
          command: pnpm run --filter gql-engine hasura:noDoppler metadata apply --disallow-inconsistent-metadata
        env:
          HASURA_GRAPHQL_ENDPOINT: ${{inputs.hasura-endpoint}}
          HASURA_GRAPHQL_ADMIN_SECRET: ${{ steps.decrypt-admin-secret.outputs.admin_secret }}
