name: Setup Preview Hasura App
on:
  workflow_call:
    inputs:
      base-ref:
        type: string
        description: "Base branch that the database & Hasura are already synced to"
        required: true
      node-version:
        type: string
        required: true
      pnpm-version:
        type: string
        required: true
    secrets:
      hasura-endpoint:
        description: "Endpoint of the Hasura tenant"
        required: true
      hasura-admin-secret:
        description: Admin secret of the Hasura tenant; either provide this or the encrypted secret
        required: false
      hasura-admin-secret-encrypted:
        description: Admin secret of the Hasura tenant, encrypted
        required: false
      gpg-crypto-secret:
        description: GPG key to decrypt the encrypted admin secret
        required: false

jobs:
  create-hasura-preview-app:
    runs-on: ubuntu-latest
    name: Deploy Hasura Preview App
    steps:
      - name: Check if encrypted admin secret is provided
        id: check-secret-encrypted
        run: echo "ADMIN_SECRET_ENCRYPTED_PRESENT=$(if echo '${{secrets.hasura-admin-secret-encrypted}}' | grep -q .; then echo 'yes'; else echo 'no'; fi)" >> "$GITHUB_OUTPUT"

      - id: decrypt-admin-secret
        name: Decrypt Hasura GraphQL Admin Secret
        if: ${{steps.check-secret-encrypted.outputs.ADMIN_SECRET_ENCRYPTED_PRESENT == 'yes'}}
        env:
          GPG_SECRET: ${{ secrets.gpg-crypto-secret }}
        run: |
          ADMIN_SECRET=$(gpg --decrypt --quiet --batch --passphrase "$GPG_SECRET" --output - <(echo "${{secrets.hasura-admin-secret-encrypted}}" | base64 --decode))
          echo "::add-mask::$ADMIN_SECRET"
          echo "admin_secret=$ADMIN_SECRET" >> "$GITHUB_OUTPUT"

      - name: Checkout base branch
        uses: actions/checkout@v2
        with:
          ref: ${{inputs.base-ref}}

      - name: Install Hasura CLI
        run: curl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | bash

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ inputs.pnpm-version }}

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install gql-engine package dependencies
        run: pnpm install --filter "gql-engine..."

      - name: Wait for Hasura to be ready
        env:
          GQL_ENDPOINT: ${{ secrets.hasura-endpoint}}
        # wait a minute max
        run: |
          echo "Endpoint: $GQL_ENDPOINT"
          pnpm exec --filter gql-engine wait-on --timeout 60000 "${GQL_ENDPOINT/https:/https-get:}/healthz"
          pnpm exec --filter gql-engine wait-on --timeout 60000 "${GQL_ENDPOINT/https:/https-get:}/v1/version"

      - name: Apply Hasura Metadata
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 5
          retry_on: error
          command: pnpm run --filter gql-engine hasura:noDoppler metadata apply --disallow-inconsistent-metadata
        env:
          HASURA_GRAPHQL_ENDPOINT: ${{secrets.hasura-endpoint}}
          HASURA_GRAPHQL_ADMIN_SECRET: ${{secrets.hasura-admin-secret || steps.decrypt-admin-secret.outputs.admin_secret}}
